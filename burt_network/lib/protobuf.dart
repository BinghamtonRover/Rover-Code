/// This library exports the generated Protobuf classes.
///
/// Nothing in this library is hand-written. See our [Protobuf repository](https://github.com/BinghamtonRover/Protobuf) for more details.
library;

export "src/generated/arm.pb.dart";
export "src/generated/base_station.pb.dart";
export "src/generated/autonomy.pb.dart";
export "src/generated/core.pb.dart";
export "src/generated/drive.pb.dart";
export "src/generated/geometry.pb.dart";
export "src/generated/gps.pb.dart";
export "src/generated/logs.pb.dart";
export "src/generated/motor.pb.dart";
export "src/generated/relays.pb.dart";
export "src/generated/science.pb.dart";
export "src/generated/status.pb.dart";
export "src/generated/subsystems.pb.dart";
export "src/generated/utils.pb.dart";
export "src/generated/version.pb.dart";
export "src/generated/video.pb.dart";
export "src/generated/vision.pb.dart";
export "src/generated/wrapper.pb.dart";

export "src/utils.dart";

export "src/generated/google/protobuf/timestamp.pb.dart";

import "package:protobuf/protobuf.dart" as proto;

import "src/generated/wrapper.pb.dart";
import "src/generated/google/protobuf/timestamp.pb.dart";

/// A cleaner name for any message generated by Protobuf.
typedef Message = proto.GeneratedMessage;

/// Defines a friendlier method for getting the name of a message.
extension MessageUtils on Message {
  /// The name of the message as declared in the .proto file.
  String get messageName => info_.messageName;

  /// Returns a [WrappedMessage] representing this message with a timestamp
  WrappedMessage wrap([DateTime? timestamp]) => WrappedMessage(
    data: writeToBuffer(),
    name: messageName,
    timestamp: Timestamp.fromDateTime(timestamp ?? DateTime.now()),
  );
}

/// Helpful methods on lists of Protobuf enums.
extension EnumUtils<T extends proto.ProtobufEnum> on List<T> {
  /// Filters out the `UNDEFINED` value.
  List<T> get filtered => [
    for (final value in this)
      if (value.value != 0)
        value,
  ];

  /// A list of all the enum value names.
  List<String> get names => [
    for (final value in filtered)
      value.name,
  ];
}
