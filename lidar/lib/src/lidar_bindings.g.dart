// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for the LiDAR SDK.
///
/// Regenerate bindings with `dart run ffigen --lidar ffigen.yaml -v severe`.
///
class LidarBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LidarBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LidarBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  LidarStatus init(
    ffi.Pointer<NativeLidar> lidar,
  ) {
    return LidarStatus.fromValue(_init(
      lidar,
    ));
  }

  late final _initPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<NativeLidar>)>>('init');
  late final _init =
      _initPtr.asFunction<int Function(ffi.Pointer<NativeLidar>)>();

  void dispose(
    ffi.Pointer<NativeLidar> lidar,
  ) {
    return _dispose(
      lidar,
    );
  }

  late final _disposePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NativeLidar>)>>(
          'dispose');
  late final _dispose =
      _disposePtr.asFunction<void Function(ffi.Pointer<NativeLidar>)>();

  LidarStatus registerCallback(
    ffi.Pointer<NativeLidar> lidar,
  ) {
    return LidarStatus.fromValue(_registerCallback(
      lidar,
    ));
  }

  late final _registerCallbackPtr = _lookup<
          ffi
          .NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<NativeLidar>)>>(
      'registerCallback');
  late final _registerCallback =
      _registerCallbackPtr.asFunction<int Function(ffi.Pointer<NativeLidar>)>();

  void deregisterCallback(
    ffi.Pointer<NativeLidar> lidar,
  ) {
    return _deregisterCallback(
      lidar,
    );
  }

  late final _deregisterCallbackPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NativeLidar>)>>(
          'deregisterCallback');
  late final _deregisterCallback = _deregisterCallbackPtr
      .asFunction<void Function(ffi.Pointer<NativeLidar>)>();

  void updateStatus(
    ffi.Pointer<NativeLidar> lidar,
  ) {
    return _updateStatus(
      lidar,
    );
  }

  late final _updateStatusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<NativeLidar>)>>(
          'updateStatus');
  late final _updateStatus =
      _updateStatusPtr.asFunction<void Function(ffi.Pointer<NativeLidar>)>();
}

/// The different outcomes of the API.
///
/// Should remain in sync with [SickScanApiErrorCodes](https://github.com/SICKAG/sick_scan_xd/blob/8e560a865ea3642bb0230183b71ac149219978dd/include/sick_scan_xd_api/sick_scan_api.h#L607).
/// Casting the SickScan codes to this enum should be safe.
enum LidarStatus {
  SUCCESS(0),
  ERROR(1),
  NOT_LOADED(2),
  NOT_INITIALIZED(3),
  NOT_IMPLEMENTED(4),
  TIMEOUT(5);

  final int value;
  const LidarStatus(this.value);

  static LidarStatus fromValue(int value) => switch (value) {
        0 => SUCCESS,
        1 => ERROR,
        2 => NOT_LOADED,
        3 => NOT_INITIALIZED,
        4 => NOT_IMPLEMENTED,
        5 => TIMEOUT,
        _ => throw ArgumentError("Unknown value for LidarStatus: $value"),
      };
}

/// Callback declarations
typedef SickScanApiHandle = ffi.Pointer<ffi.Void>;

final class Image extends ffi.Struct {
  @ffi.Uint32()
  external int height;

  @ffi.Uint32()
  external int width;

  external ffi.Pointer<ffi.Uint8> data;
}

final class NativeLidar extends ffi.Struct {
  external SickScanApiHandle api;

  /// Unused but populated. Leave as-is for now.
  external Image image;

  external ffi.Pointer<ffi.Double> angleData;

  @ffi.UnsignedInt()
  external int statusCodeAsInt;

  LidarStatus get statusCode => LidarStatus.fromValue(statusCodeAsInt);

  external ffi.Pointer<ffi.Char> statusBuffer;

  @ffi.Bool()
  external bool hasNewData;
}
